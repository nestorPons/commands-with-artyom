import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/artyom.js/build/artyom.js
var require_artyom = __commonJS({
  "node_modules/artyom.js/build/artyom.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var Artyom = function() {
      function Artyom2() {
        this.ArtyomCommands = [];
        this.ArtyomVoicesIdentifiers = {
          // German
          "de-DE": ["Google Deutsch", "de-DE", "de_DE"],
          // Spanish
          "es-ES": ["Google español", "es-ES", "es_ES", "es-MX", "es_MX"],
          // Italian
          "it-IT": ["Google italiano", "it-IT", "it_IT"],
          // Japanese
          "jp-JP": ["Google 日本人", "ja-JP", "ja_JP"],
          // English USA
          "en-US": ["Google US English", "en-US", "en_US"],
          // English UK
          "en-GB": ["Google UK English Male", "Google UK English Female", "en-GB", "en_GB"],
          // Brazilian Portuguese
          "pt-BR": ["Google português do Brasil", "pt-PT", "pt-BR", "pt_PT", "pt_BR"],
          // Portugal Portuguese
          // Note: in desktop, there's no voice for portugal Portuguese
          "pt-PT": ["Google português do Brasil", "pt-PT", "pt_PT"],
          // Russian
          "ru-RU": ["Google русский", "ru-RU", "ru_RU"],
          // Dutch (holland)
          "nl-NL": ["Google Nederlands", "nl-NL", "nl_NL"],
          // French
          "fr-FR": ["Google français", "fr-FR", "fr_FR"],
          // Polish
          "pl-PL": ["Google polski", "pl-PL", "pl_PL"],
          // Indonesian
          "id-ID": ["Google Bahasa Indonesia", "id-ID", "id_ID"],
          // Hindi
          "hi-IN": ["Google हिन्दी", "hi-IN", "hi_IN"],
          // Mandarin Chinese
          "zh-CN": ["Google 普通话（中国大陆）", "zh-CN", "zh_CN"],
          // Cantonese Chinese
          "zh-HK": ["Google 粤語（香港）", "zh-HK", "zh_HK"],
          // Native voice
          "native": ["native"]
        };
        if (window.hasOwnProperty("speechSynthesis")) {
          speechSynthesis.getVoices();
        } else {
          console.error("Artyom.js can't speak without the Speech Synthesis API.");
        }
        if (window.hasOwnProperty("webkitSpeechRecognition")) {
          this.ArtyomWebkitSpeechRecognition = new window.webkitSpeechRecognition();
        } else {
          console.error("Artyom.js can't recognize voice without the Speech Recognition API.");
        }
        this.ArtyomProperties = {
          lang: "en-GB",
          recognizing: false,
          continuous: false,
          speed: 1,
          volume: 1,
          listen: false,
          mode: "normal",
          debug: false,
          helpers: {
            redirectRecognizedTextOutput: null,
            remoteProcessorHandler: null,
            lastSay: null,
            fatalityPromiseCallback: null
          },
          executionKeyword: null,
          obeyKeyword: null,
          speaking: false,
          obeying: true,
          soundex: false,
          name: null
        };
        this.ArtyomGarbageCollection = [];
        this.ArtyomFlags = {
          restartRecognition: false
        };
        this.ArtyomGlobalEvents = {
          ERROR: "ERROR",
          SPEECH_SYNTHESIS_START: "SPEECH_SYNTHESIS_START",
          SPEECH_SYNTHESIS_END: "SPEECH_SYNTHESIS_END",
          TEXT_RECOGNIZED: "TEXT_RECOGNIZED",
          COMMAND_RECOGNITION_START: "COMMAND_RECOGNITION_START",
          COMMAND_RECOGNITION_END: "COMMAND_RECOGNITION_END",
          COMMAND_MATCHED: "COMMAND_MATCHED",
          NOT_COMMAND_MATCHED: "NOT_COMMAND_MATCHED"
        };
        this.Device = {
          isMobile: false,
          isChrome: true
        };
        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
          this.Device.isMobile = true;
        }
        if (navigator.userAgent.indexOf("Chrome") == -1) {
          this.Device.isChrome = false;
        }
        this.ArtyomVoice = {
          default: false,
          lang: "en-GB",
          localService: false,
          name: "Google UK English Male",
          voiceURI: "Google UK English Male"
        };
      }
      Artyom2.prototype.addCommands = function(param) {
        var _this = this;
        var processCommand = function(command) {
          if (command.hasOwnProperty("indexes")) {
            _this.ArtyomCommands.push(command);
          } else {
            console.error("The given command doesn't provide any index to execute.");
          }
        };
        if (param instanceof Array) {
          for (var i = 0; i < param.length; i++) {
            processCommand(param[i]);
          }
        } else {
          processCommand(param);
        }
        return true;
      };
      ;
      Artyom2.prototype.clearGarbageCollection = function() {
        return this.ArtyomGarbageCollection = [];
      };
      ;
      Artyom2.prototype.debug = function(message, type) {
        var preMessage = "[v" + this.getVersion() + "] Artyom.js";
        if (this.ArtyomProperties.debug === true) {
          switch (type) {
            case "error":
              console.log("%c" + preMessage + ":%c " + message, "background: #C12127; color: black;", "color:black;");
              break;
            case "warn":
              console.warn(message);
              break;
            case "info":
              console.log("%c" + preMessage + ":%c " + message, "background: #4285F4; color: #FFFFFF", "color:black;");
              break;
            default:
              console.log("%c" + preMessage + ":%c " + message, "background: #005454; color: #BFF8F8", "color:black;");
              break;
          }
        }
      };
      Artyom2.prototype.detectErrors = function() {
        var _this = this;
        if (window.location.protocol == "file:") {
          var message = "Error: running Artyom directly from a file. The APIs require a different communication protocol like HTTP or HTTPS";
          console.error(message);
          return {
            code: "artyom_error_localfile",
            message
          };
        }
        if (!_this.Device.isChrome) {
          var message = "Error: the Speech Recognition and Speech Synthesis APIs require the Google Chrome Browser to work.";
          console.error(message);
          return {
            code: "artyom_error_browser_unsupported",
            message
          };
        }
        if (window.location.protocol != "https:") {
          console.warn("Warning: artyom is being executed using the '" + window.location.protocol + "' protocol. The continuous mode requires a secure protocol (HTTPS)");
        }
        return false;
      };
      Artyom2.prototype.emptyCommands = function() {
        return this.ArtyomCommands = [];
      };
      Artyom2.prototype.execute = function(voz) {
        var _this = this;
        if (!voz) {
          console.warn("Internal error: Execution of empty command");
          return;
        }
        if (_this.ArtyomProperties.name) {
          if (voz.indexOf(_this.ArtyomProperties.name) != 0) {
            _this.debug('Artyom requires with a name "' + _this.ArtyomProperties.name + `" but the name wasn't spoken.`, "warn");
            return;
          }
          voz = voz.substr(_this.ArtyomProperties.name.length);
        }
        _this.debug(">> " + voz);
        for (var i = 0; i < _this.ArtyomCommands.length; i++) {
          var instruction = _this.ArtyomCommands[i];
          var opciones = instruction.indexes;
          var encontrado = -1;
          var wildy = "";
          for (var c = 0; c < opciones.length; c++) {
            var opcion = opciones[c];
            if (!instruction.smart) {
              continue;
            }
            if (opcion instanceof RegExp) {
              if (opcion.test(voz)) {
                _this.debug(">> REGEX " + opcion.toString() + " MATCHED AGAINST " + voz + " WITH INDEX " + c + " IN COMMAND ", "info");
                encontrado = parseInt(c.toString());
              }
            } else {
              if (opcion.indexOf("*") != -1) {
                var grupo = opcion.split("*");
                if (grupo.length > 2) {
                  console.warn("Artyom found a smart command with " + (grupo.length - 1) + " wildcards. Artyom only support 1 wildcard for each command. Sorry");
                  continue;
                }
                var before = grupo[0];
                var later = grupo[1];
                if (later == "" || later == " ") {
                  if (voz.indexOf(before) != -1 || voz.toLowerCase().indexOf(before.toLowerCase()) != -1) {
                    wildy = voz.replace(before, "");
                    wildy = wildy.toLowerCase().replace(before.toLowerCase(), "");
                    encontrado = parseInt(c.toString());
                  }
                } else {
                  if (voz.indexOf(before) != -1 || voz.toLowerCase().indexOf(before.toLowerCase()) != -1) {
                    if (voz.indexOf(later) != -1 || voz.toLowerCase().indexOf(later.toLowerCase()) != -1) {
                      wildy = voz.replace(before, "").replace(later, "");
                      wildy = wildy.toLowerCase().replace(before.toLowerCase(), "").replace(later.toLowerCase(), "");
                      wildy = wildy.toLowerCase().replace(later.toLowerCase(), "");
                      encontrado = parseInt(c.toString());
                    }
                  }
                }
              } else {
                console.warn("Founded command marked as SMART but have no wildcard in the indexes, remove the SMART for prevent extensive memory consuming or add the wildcard *");
              }
            }
            if (encontrado >= 0) {
              encontrado = parseInt(c.toString());
              break;
            }
          }
          if (encontrado >= 0) {
            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);
            var response = {
              index: encontrado,
              instruction,
              wildcard: {
                item: wildy,
                full: voz
              }
            };
            return response;
          }
        }
        for (var i = 0; i < _this.ArtyomCommands.length; i++) {
          var instruction = _this.ArtyomCommands[i];
          var opciones = instruction.indexes;
          var encontrado = -1;
          for (var c = 0; c < opciones.length; c++) {
            var opcion = opciones[c];
            if (instruction.smart) {
              continue;
            }
            if (voz === opcion) {
              _this.debug(">> MATCHED FULL EXACT OPTION " + opcion + " AGAINST " + voz + " WITH INDEX " + c + " IN COMMAND ", "info");
              encontrado = parseInt(c.toString());
              break;
            } else if (voz.toLowerCase() === opcion.toLowerCase()) {
              _this.debug(">> MATCHED OPTION CHANGING ALL TO LOWERCASE " + opcion + " AGAINST " + voz + " WITH INDEX " + c + " IN COMMAND ", "info");
              encontrado = parseInt(c.toString());
              break;
            }
          }
          if (encontrado >= 0) {
            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);
            var response = {
              index: encontrado,
              instruction
            };
            return response;
          }
        }
        for (var i = 0; i < _this.ArtyomCommands.length; i++) {
          var instruction = _this.ArtyomCommands[i];
          var opciones = instruction.indexes;
          var encontrado = -1;
          for (var c = 0; c < opciones.length; c++) {
            if (instruction.smart) {
              continue;
            }
            var opcion = opciones[c];
            if (voz.indexOf(opcion) >= 0) {
              _this.debug(">> MATCHED INDEX EXACT OPTION " + opcion + " AGAINST " + voz + " WITH INDEX " + c + " IN COMMAND ", "info");
              encontrado = parseInt(c.toString());
              break;
            } else if (voz.toLowerCase().indexOf(opcion.toLowerCase()) >= 0) {
              _this.debug(">> MATCHED INDEX OPTION CHANGING ALL TO LOWERCASE " + opcion + " AGAINST " + voz + " WITH INDEX " + c + " IN COMMAND ", "info");
              encontrado = parseInt(c.toString());
              break;
            }
          }
          if (encontrado >= 0) {
            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);
            var response = {
              index: encontrado,
              instruction
            };
            return response;
          }
        }
        if (_this.ArtyomProperties.soundex) {
          for (var i = 0; i < _this.ArtyomCommands.length; i++) {
            var instruction = _this.ArtyomCommands[i];
            var opciones = instruction.indexes;
            var encontrado = -1;
            for (var c = 0; c < opciones.length; c++) {
              var opcion = opciones[c];
              if (instruction.smart) {
                continue;
              }
              if (_this.soundex(voz) == _this.soundex(opcion)) {
                _this.debug(">> Matched Soundex command '" + opcion + "' AGAINST '" + voz + "' with index " + c, "info");
                encontrado = parseInt(c.toString());
                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);
                var response = {
                  index: encontrado,
                  instruction
                };
                return response;
              }
            }
          }
        }
        _this.debug("Event reached : " + _this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);
        _this.triggerEvent(_this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);
        return;
      };
      Artyom2.prototype.fatality = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
          _this.ArtyomProperties.helpers.fatalityPromiseCallback = resolve;
          try {
            _this.ArtyomFlags.restartRecognition = false;
            _this.ArtyomWebkitSpeechRecognition.stop();
          } catch (e) {
            reject(e);
          }
        });
      };
      Artyom2.prototype.getAvailableCommands = function() {
        return this.ArtyomCommands;
      };
      Artyom2.prototype.getVoices = function() {
        return window.speechSynthesis.getVoices();
      };
      Artyom2.prototype.speechSupported = function() {
        return "speechSynthesis" in window;
      };
      Artyom2.prototype.recognizingSupported = function() {
        return "webkitSpeechRecognition" in window;
      };
      Artyom2.prototype.shutUp = function() {
        if ("speechSynthesis" in window) {
          do {
            window.speechSynthesis.cancel();
          } while (window.speechSynthesis.pending === true);
        }
        this.ArtyomProperties.speaking = false;
        this.clearGarbageCollection();
      };
      Artyom2.prototype.getProperties = function() {
        return this.ArtyomProperties;
      };
      Artyom2.prototype.getLanguage = function() {
        return this.ArtyomProperties.lang;
      };
      Artyom2.prototype.getVersion = function() {
        return "1.0.6";
      };
      Artyom2.prototype.hey = function(resolve, reject) {
        var start_timestamp;
        var artyom_is_allowed;
        var _this = this;
        if (this.Device.isMobile) {
          this.ArtyomWebkitSpeechRecognition.continuous = false;
          this.ArtyomWebkitSpeechRecognition.interimResults = false;
          this.ArtyomWebkitSpeechRecognition.maxAlternatives = 1;
        } else {
          this.ArtyomWebkitSpeechRecognition.continuous = true;
          this.ArtyomWebkitSpeechRecognition.interimResults = true;
        }
        this.ArtyomWebkitSpeechRecognition.lang = this.ArtyomProperties.lang;
        this.ArtyomWebkitSpeechRecognition.onstart = function() {
          _this.debug("Event reached : " + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);
          _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);
          _this.ArtyomProperties.recognizing = true;
          artyom_is_allowed = true;
          resolve();
        };
        this.ArtyomWebkitSpeechRecognition.onerror = function(event) {
          reject(event.error);
          _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {
            code: event.error
          });
          if (event.error == "audio-capture") {
            artyom_is_allowed = false;
          }
          if (event.error == "not-allowed") {
            artyom_is_allowed = false;
            if (event.timeStamp - start_timestamp < 100) {
              _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {
                code: "info-blocked",
                message: "Artyom needs the permision of the microphone, is blocked."
              });
            } else {
              _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {
                code: "info-denied",
                message: "Artyom needs the permision of the microphone, is denied"
              });
            }
          }
        };
        _this.ArtyomWebkitSpeechRecognition.onend = function() {
          if (_this.ArtyomFlags.restartRecognition === true) {
            if (artyom_is_allowed === true) {
              _this.ArtyomWebkitSpeechRecognition.start();
              _this.debug("Continuous mode enabled, restarting", "info");
            } else {
              console.error("Verify the microphone and check for the table of errors in sdkcarlos.github.io/sites/artyom.html to solve your problem. If you want to give your user a message when an error appears add an artyom listener");
            }
            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {
              code: "continuous_mode_enabled",
              message: "OnEnd event reached with continuous mode"
            });
          } else {
            if (_this.ArtyomProperties.helpers.fatalityPromiseCallback) {
              setTimeout(function() {
                _this.ArtyomProperties.helpers.fatalityPromiseCallback();
              }, 500);
              _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {
                code: "continuous_mode_disabled",
                message: "OnEnd event reached without continuous mode"
              });
            }
          }
          _this.ArtyomProperties.recognizing = false;
        };
        var onResultProcessor;
        if (_this.ArtyomProperties.mode == "normal") {
          onResultProcessor = function(event) {
            if (!_this.ArtyomCommands.length) {
              _this.debug("No commands to process in normal mode.");
              return;
            }
            var cantidadResultados = event.results.length;
            _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);
            for (var i = event.resultIndex; i < cantidadResultados; ++i) {
              var identificated = event.results[i][0].transcript;
              if (event.results[i].isFinal) {
                var comando = _this.execute(identificated.trim());
                if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === "function") {
                  _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);
                }
                if (comando && _this.ArtyomProperties.recognizing == true) {
                  _this.debug("<< Executing Matching Recognition in normal mode >>", "info");
                  _this.ArtyomWebkitSpeechRecognition.stop();
                  _this.ArtyomProperties.recognizing = false;
                  if (comando.wildcard) {
                    comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);
                  } else {
                    comando.instruction.action(comando.index);
                  }
                  break;
                }
              } else {
                if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === "function") {
                  _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);
                }
                if (typeof _this.ArtyomProperties.executionKeyword === "string") {
                  if (identificated.indexOf(_this.ArtyomProperties.executionKeyword) != -1) {
                    var comando = _this.execute(identificated.replace(_this.ArtyomProperties.executionKeyword, "").trim());
                    if (comando && _this.ArtyomProperties.recognizing == true) {
                      _this.debug("<< Executing command ordered by ExecutionKeyword >>", "info");
                      _this.ArtyomWebkitSpeechRecognition.stop();
                      _this.ArtyomProperties.recognizing = false;
                      if (comando.wildcard) {
                        comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);
                      } else {
                        comando.instruction.action(comando.index);
                      }
                      break;
                    }
                  }
                }
                _this.debug("Normal mode : " + identificated);
              }
            }
          };
        }
        if (_this.ArtyomProperties.mode == "quick") {
          onResultProcessor = function(event) {
            if (!_this.ArtyomCommands.length) {
              _this.debug("No commands to process.");
              return;
            }
            var cantidadResultados = event.results.length;
            _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);
            for (var i = event.resultIndex; i < cantidadResultados; ++i) {
              var identificated = event.results[i][0].transcript;
              if (!event.results[i].isFinal) {
                var comando = _this.execute(identificated.trim());
                if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === "function") {
                  _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);
                }
                if (comando && _this.ArtyomProperties.recognizing == true) {
                  _this.debug("<< Executing Matching Recognition in quick mode >>", "info");
                  _this.ArtyomWebkitSpeechRecognition.stop();
                  _this.ArtyomProperties.recognizing = false;
                  if (comando.wildcard) {
                    comando.instruction.action(comando.index, comando.wildcard.item);
                  } else {
                    comando.instruction.action(comando.index);
                  }
                  break;
                }
              } else {
                var comando = _this.execute(identificated.trim());
                if (typeof _this.ArtyomProperties.helpers.redirectRecognizedTextOutput === "function") {
                  _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);
                }
                if (comando && _this.ArtyomProperties.recognizing == true) {
                  _this.debug("<< Executing Matching Recognition in quick mode >>", "info");
                  _this.ArtyomWebkitSpeechRecognition.stop();
                  _this.ArtyomProperties.recognizing = false;
                  if (comando.wildcard) {
                    comando.instruction.action(comando.index, comando.wildcard.item);
                  } else {
                    comando.instruction.action(comando.index);
                  }
                  break;
                }
              }
              _this.debug("Quick mode : " + identificated);
            }
          };
        }
        if (_this.ArtyomProperties.mode == "remote") {
          onResultProcessor = function(event) {
            var cantidadResultados = event.results.length;
            _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);
            if (typeof _this.ArtyomProperties.helpers.remoteProcessorHandler !== "function") {
              return _this.debug("The remoteProcessorService is undefined.", "warn");
            }
            for (var i = event.resultIndex; i < cantidadResultados; ++i) {
              var identificated = event.results[i][0].transcript;
              _this.ArtyomProperties.helpers.remoteProcessorHandler({
                text: identificated,
                isFinal: event.results[i].isFinal
              });
            }
          };
        }
        _this.ArtyomWebkitSpeechRecognition.onresult = function(event) {
          if (_this.ArtyomProperties.obeying) {
            onResultProcessor(event);
          } else {
            if (!_this.ArtyomProperties.obeyKeyword) {
              return;
            }
            var temporal = "";
            var interim = "";
            for (var i = 0; i < event.results.length; ++i) {
              if (event.results[i].isFinal) {
                temporal += event.results[i][0].transcript;
              } else {
                interim += event.results[i][0].transcript;
              }
            }
            _this.debug("Artyom is not obeying", "warn");
            if (interim.indexOf(_this.ArtyomProperties.obeyKeyword) > -1 || temporal.indexOf(_this.ArtyomProperties.obeyKeyword) > -1) {
              _this.ArtyomProperties.obeying = true;
            }
          }
        };
        if (_this.ArtyomProperties.recognizing) {
          _this.ArtyomWebkitSpeechRecognition.stop();
          _this.debug("Event reached : " + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);
          _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);
        } else {
          try {
            _this.ArtyomWebkitSpeechRecognition.start();
          } catch (e) {
            _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {
              code: "recognition_overlap",
              message: "A webkitSpeechRecognition instance has been started while there's already running. Is recommendable to restart the Browser"
            });
          }
        }
      };
      Artyom2.prototype.initialize = function(config) {
        var _this = this;
        if (typeof config !== "object") {
          return Promise.reject("You must give the configuration for start artyom properly.");
        }
        if (config.hasOwnProperty("lang")) {
          _this.ArtyomVoice = _this.getVoice(config.lang);
          _this.ArtyomProperties.lang = config.lang;
        }
        if (config.hasOwnProperty("continuous")) {
          if (config.continuous) {
            this.ArtyomProperties.continuous = true;
            this.ArtyomFlags.restartRecognition = true;
          } else {
            this.ArtyomProperties.continuous = false;
            this.ArtyomFlags.restartRecognition = false;
          }
        }
        if (config.hasOwnProperty("speed")) {
          this.ArtyomProperties.speed = config.speed;
        }
        if (config.hasOwnProperty("soundex")) {
          this.ArtyomProperties.soundex = config.soundex;
        }
        if (config.hasOwnProperty("executionKeyword")) {
          this.ArtyomProperties.executionKeyword = config.executionKeyword;
        }
        if (config.hasOwnProperty("obeyKeyword")) {
          this.ArtyomProperties.obeyKeyword = config.obeyKeyword;
        }
        if (config.hasOwnProperty("volume")) {
          this.ArtyomProperties.volume = config.volume;
        }
        if (config.hasOwnProperty("listen")) {
          this.ArtyomProperties.listen = config.listen;
        }
        if (config.hasOwnProperty("name")) {
          this.ArtyomProperties.name = config.name;
        }
        if (config.hasOwnProperty("debug")) {
          this.ArtyomProperties.debug = config.debug;
        } else {
          console.warn("The initialization doesn't provide how the debug mode should be handled. Is recommendable to set this value either to true or false.");
        }
        if (config.mode) {
          this.ArtyomProperties.mode = config.mode;
        }
        if (this.ArtyomProperties.listen === true) {
          return new Promise(function(resolve, reject) {
            _this.hey(resolve, reject);
          });
        }
        return Promise.resolve(true);
      };
      Artyom2.prototype.on = function(indexes, smart) {
        var _this = this;
        return {
          then: function(action) {
            var command = {
              indexes,
              action
            };
            if (smart) {
              command.smart = true;
            }
            _this.addCommands(command);
          }
        };
      };
      Artyom2.prototype.triggerEvent = function(name, param) {
        var event = new CustomEvent(name, {
          "detail": param
        });
        document.dispatchEvent(event);
        return event;
      };
      Artyom2.prototype.repeatLastSay = function(returnObject) {
        var last = this.ArtyomProperties.helpers.lastSay;
        if (returnObject) {
          return last;
        } else {
          if (last != null) {
            this.say(last.text);
          }
        }
      };
      Artyom2.prototype.when = function(event, action) {
        return document.addEventListener(event, function(e) {
          action(e["detail"]);
        }, false);
      };
      Artyom2.prototype.remoteProcessorService = function(action) {
        this.ArtyomProperties.helpers.remoteProcessorHandler = action;
        return true;
      };
      Artyom2.prototype.voiceAvailable = function(languageCode) {
        return typeof this.getVoice(languageCode) !== "undefined";
      };
      Artyom2.prototype.isObeying = function() {
        return this.ArtyomProperties.obeying;
      };
      Artyom2.prototype.obey = function() {
        return this.ArtyomProperties.obeying = true;
      };
      Artyom2.prototype.dontObey = function() {
        return this.ArtyomProperties.obeying = false;
      };
      Artyom2.prototype.isSpeaking = function() {
        return this.ArtyomProperties.speaking;
      };
      Artyom2.prototype.isRecognizing = function() {
        return this.ArtyomProperties.recognizing;
      };
      Artyom2.prototype.getNativeApi = function() {
        return this.ArtyomWebkitSpeechRecognition;
      };
      Artyom2.prototype.getGarbageCollection = function() {
        return this.ArtyomGarbageCollection;
      };
      Artyom2.prototype.getVoice = function(languageCode) {
        var voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[languageCode];
        if (!voiceIdentifiersArray) {
          console.warn("The providen language " + languageCode + " isn't available, using English Great britain as default");
          voiceIdentifiersArray = this.ArtyomVoicesIdentifiers["en-GB"];
        }
        var voice = void 0;
        var voices = speechSynthesis.getVoices();
        var voicesLength = voiceIdentifiersArray.length;
        var _loop_1 = function(i2) {
          var foundVoice = voices.filter(function(voice2) {
            return voice2.name == voiceIdentifiersArray[i2] || voice2.lang == voiceIdentifiersArray[i2];
          })[0];
          if (foundVoice) {
            voice = foundVoice;
            return "break";
          }
        };
        for (var i = 0; i < voicesLength; i++) {
          var state_1 = _loop_1(i);
          if (state_1 === "break")
            break;
        }
        return voice;
      };
      Artyom2.prototype.newDictation = function(settings) {
        var _this = this;
        if (!_this.recognizingSupported()) {
          console.error("SpeechRecognition is not supported in this browser");
          return false;
        }
        var dictado = new window.webkitSpeechRecognition();
        dictado.continuous = true;
        dictado.interimResults = true;
        dictado.lang = _this.ArtyomProperties.lang;
        dictado.onresult = function(event) {
          var temporal = "";
          var interim = "";
          for (var i = 0; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
              temporal += event.results[i][0].transcript;
            } else {
              interim += event.results[i][0].transcript;
            }
          }
          if (settings.onResult) {
            settings.onResult(interim, temporal);
          }
        };
        return new function() {
          var dictation = dictado;
          var flagStartCallback = true;
          var flagRestart = false;
          this.onError = null;
          this.start = function() {
            if (settings.continuous === true) {
              flagRestart = true;
            }
            dictation.onstart = function() {
              if (typeof settings.onStart === "function") {
                if (flagStartCallback === true) {
                  settings.onStart();
                }
              }
            };
            dictation.onend = function() {
              if (flagRestart === true) {
                flagStartCallback = false;
                dictation.start();
              } else {
                flagStartCallback = true;
                if (typeof settings.onEnd === "function") {
                  settings.onEnd();
                }
              }
            };
            dictation.start();
          };
          this.stop = function() {
            flagRestart = false;
            dictation.stop();
          };
          if (typeof settings.onError === "function") {
            dictation.onerror = settings.onError;
          }
        }();
      };
      Artyom2.prototype.newPrompt = function(config) {
        if (typeof config !== "object") {
          console.error("Expected the prompt configuration.");
        }
        var copyActualCommands = Object.assign([], this.ArtyomCommands);
        var _this = this;
        this.emptyCommands();
        var promptCommand = {
          description: "Setting the artyom commands only for the prompt. The commands will be restored after the prompt finishes",
          indexes: config.options,
          action: function(i, wildcard) {
            _this.ArtyomCommands = copyActualCommands;
            var toExe = config.onMatch(i, wildcard);
            if (typeof toExe !== "function") {
              console.error("onMatch function expects a returning function to be executed");
              return;
            }
            toExe();
          }
        };
        if (config.smart) {
          promptCommand.smart = true;
        }
        this.addCommands(promptCommand);
        if (typeof config.beforePrompt !== "undefined") {
          config.beforePrompt();
        }
        var callbacks = {
          onStart: function() {
            if (typeof config.onStartPrompt !== "undefined") {
              config.onStartPrompt();
            }
          },
          onEnd: function() {
            if (typeof config.onEndPrompt !== "undefined") {
              config.onEndPrompt();
            }
          }
        };
        this.say(config.question, callbacks);
      };
      Artyom2.prototype.sayRandom = function(data) {
        if (data instanceof Array) {
          var index = Math.floor(Math.random() * data.length);
          this.say(data[index]);
          return {
            text: data[index],
            index
          };
        } else {
          console.error("Random quotes must be in an array !");
          return null;
        }
      };
      Artyom2.prototype.setDebug = function(status) {
        if (status) {
          return this.ArtyomProperties.debug = true;
        } else {
          return this.ArtyomProperties.debug = false;
        }
      };
      Artyom2.prototype.simulateInstruction = function(sentence) {
        var _this = this;
        if (!sentence || typeof sentence !== "string") {
          console.warn("Cannot execute a non string command");
          return false;
        }
        var foundCommand = _this.execute(sentence);
        if (typeof foundCommand === "object") {
          if (foundCommand.instruction) {
            if (foundCommand.instruction.smart) {
              _this.debug("Smart command matches with simulation, executing", "info");
              foundCommand.instruction.action(foundCommand.index, foundCommand.wildcard.item, foundCommand.wildcard.full);
            } else {
              _this.debug("Command matches with simulation, executing", "info");
              foundCommand.instruction.action(foundCommand.index);
            }
            return true;
          }
        } else {
          console.warn("No command founded trying with " + sentence);
          return false;
        }
      };
      Artyom2.prototype.soundex = function(s) {
        var a = s.toLowerCase().split("");
        var f = a.shift();
        var r = "";
        var codes = { a: "", e: "", i: "", o: "", u: "", b: 1, f: 1, p: 1, v: 1, c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2, d: 3, t: 3, l: 4, m: 5, n: 5, r: 6 };
        r = f + a.map(function(v, i, a2) {
          return codes[v];
        }).filter(function(v, i, a2) {
          return i === 0 ? v !== codes[f] : v !== a2[i - 1];
        }).join("");
        return (r + "000").slice(0, 4).toUpperCase();
      };
      Artyom2.prototype.splitStringByChunks = function(input, chunk_length) {
        input = input || "";
        chunk_length = chunk_length || 100;
        var curr = chunk_length;
        var prev = 0;
        var output = [];
        while (input[curr]) {
          if (input[curr++] == " ") {
            output.push(input.substring(prev, curr));
            prev = curr;
            curr += chunk_length;
          }
        }
        output.push(input.substr(prev));
        return output;
      };
      Artyom2.prototype.redirectRecognizedTextOutput = function(action) {
        if (typeof action != "function") {
          console.warn("Expected function to handle the recognized text ...");
          return false;
        }
        this.ArtyomProperties.helpers.redirectRecognizedTextOutput = action;
        return true;
      };
      Artyom2.prototype.restart = function() {
        var _this = this;
        var _copyInit = _this.ArtyomProperties;
        return new Promise(function(resolve, reject) {
          _this.fatality().then(function() {
            _this.initialize(_copyInit).then(resolve, reject);
          });
        });
      };
      Artyom2.prototype.talk = function(text, actualChunk, totalChunks, callbacks) {
        var _this = this;
        var msg = new SpeechSynthesisUtterance();
        msg.text = text;
        msg.volume = this.ArtyomProperties.volume;
        msg.rate = this.ArtyomProperties.speed;
        var availableVoice = _this.getVoice(_this.ArtyomProperties.lang);
        if (callbacks) {
          if (callbacks.hasOwnProperty("lang")) {
            availableVoice = _this.getVoice(callbacks.lang);
          }
        }
        if (this.Device.isMobile) {
          if (availableVoice) {
            msg.lang = availableVoice.lang;
          }
        } else {
          msg.voice = availableVoice;
        }
        if (actualChunk == 1) {
          msg.addEventListener("start", function() {
            _this.ArtyomProperties.speaking = true;
            _this.debug("Event reached : " + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);
            _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);
            if (callbacks) {
              if (typeof callbacks.onStart == "function") {
                callbacks.onStart.call(msg);
              }
            }
          });
        }
        if (actualChunk >= totalChunks) {
          msg.addEventListener("end", function() {
            _this.ArtyomProperties.speaking = false;
            _this.debug("Event reached : " + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);
            _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);
            if (callbacks) {
              if (typeof callbacks.onEnd == "function") {
                callbacks.onEnd.call(msg);
              }
            }
          });
        }
        this.debug(actualChunk + " text chunk processed succesfully out of " + totalChunks);
        this.ArtyomGarbageCollection.push(msg);
        window.speechSynthesis.speak(msg);
      };
      Artyom2.prototype.say = function(message, callbacks) {
        var artyom_say_max_chunk_length = 115;
        var _this = this;
        var definitive = [];
        if (this.speechSupported()) {
          if (typeof message != "string") {
            return console.warn("Artyom expects a string to speak " + typeof message + " given");
          }
          if (!message.length) {
            return console.warn("Cannot speak empty string");
          }
          if (message.length > artyom_say_max_chunk_length) {
            var naturalReading = message.split(/,|:|\. |;/);
            naturalReading.forEach(function(chunk, index) {
              if (chunk.length > artyom_say_max_chunk_length) {
                var temp_processed = _this.splitStringByChunks(chunk, artyom_say_max_chunk_length);
                definitive.push.apply(definitive, temp_processed);
              } else {
                definitive.push(chunk);
              }
            });
          } else {
            definitive.push(message);
          }
          definitive = definitive.filter(function(e) {
            return e;
          });
          definitive.forEach(function(chunk, index) {
            var numberOfChunk = index + 1;
            if (chunk) {
              _this.talk(chunk, numberOfChunk, definitive.length, callbacks);
            }
          });
          _this.ArtyomProperties.helpers.lastSay = {
            text: message,
            date: /* @__PURE__ */ new Date()
          };
        }
      };
      return Artyom2;
    }();
    exports.default = Artyom;
  }
});
export default require_artyom();
/*! Bundled license information:

artyom.js/build/artyom.js:
  (**
   * Artyom.js is a voice control, speech recognition and speech synthesis JavaScript library.
   *
   * @requires {webkitSpeechRecognition && speechSynthesis}
   * @license MIT
   * @version 1.0.6
   * @copyright 2017 Our Code World (www.ourcodeworld.com) All Rights Reserved.
   * @author Carlos Delgado (https://github.com/sdkcarlos) and Sema García (https://github.com/semagarcia)
   * @see https://sdkcarlos.github.io/sites/artyom.html
   * @see http://docs.ourcodeworld.com/projects/artyom-js
   *)
*/
//# sourceMappingURL=artyom__js.js.map
