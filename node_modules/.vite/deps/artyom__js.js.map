{
  "version": 3,
  "sources": ["../../artyom.js/build/artyom.js"],
  "sourcesContent": ["\"use strict\";\r\n/**\r\n * Artyom.js is a voice control, speech recognition and speech synthesis JavaScript library.\r\n *\r\n * @requires {webkitSpeechRecognition && speechSynthesis}\r\n * @license MIT\r\n * @version 1.0.6\r\n * @copyright 2017 Our Code World (www.ourcodeworld.com) All Rights Reserved.\r\n * @author Carlos Delgado (https://github.com/sdkcarlos) and Sema García (https://github.com/semagarcia)\r\n * @see https://sdkcarlos.github.io/sites/artyom.html\r\n * @see http://docs.ourcodeworld.com/projects/artyom-js\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// <reference path=\"artyom.d.ts\" />\r\n// Remove \"export default \" keywords if willing to build with `npm run artyom-build-window`\r\nvar Artyom = (function () {\r\n    // Triggered at the declaration of \r\n    function Artyom() {\r\n        this.ArtyomCommands = [];\r\n        this.ArtyomVoicesIdentifiers = {\r\n            // German\r\n            \"de-DE\": [\"Google Deutsch\", \"de-DE\", \"de_DE\"],\r\n            // Spanish\r\n            \"es-ES\": [\"Google español\", \"es-ES\", \"es_ES\", \"es-MX\", \"es_MX\"],\r\n            // Italian\r\n            \"it-IT\": [\"Google italiano\", \"it-IT\", \"it_IT\"],\r\n            // Japanese\r\n            \"jp-JP\": [\"Google 日本人\", \"ja-JP\", \"ja_JP\"],\r\n            // English USA\r\n            \"en-US\": [\"Google US English\", \"en-US\", \"en_US\"],\r\n            // English UK\r\n            \"en-GB\": [\"Google UK English Male\", \"Google UK English Female\", \"en-GB\", \"en_GB\"],\r\n            // Brazilian Portuguese\r\n            \"pt-BR\": [\"Google português do Brasil\", \"pt-PT\", \"pt-BR\", \"pt_PT\", \"pt_BR\"],\r\n            // Portugal Portuguese\r\n            // Note: in desktop, there's no voice for portugal Portuguese\r\n            \"pt-PT\": [\"Google português do Brasil\", \"pt-PT\", \"pt_PT\"],\r\n            // Russian\r\n            \"ru-RU\": [\"Google русский\", \"ru-RU\", \"ru_RU\"],\r\n            // Dutch (holland)\r\n            \"nl-NL\": [\"Google Nederlands\", \"nl-NL\", \"nl_NL\"],\r\n            // French\r\n            \"fr-FR\": [\"Google français\", \"fr-FR\", \"fr_FR\"],\r\n            // Polish\r\n            \"pl-PL\": [\"Google polski\", \"pl-PL\", \"pl_PL\"],\r\n            // Indonesian\r\n            \"id-ID\": [\"Google Bahasa Indonesia\", \"id-ID\", \"id_ID\"],\r\n            // Hindi\r\n            \"hi-IN\": [\"Google हिन्दी\", \"hi-IN\", \"hi_IN\"],\r\n            // Mandarin Chinese\r\n            \"zh-CN\": [\"Google 普通话（中国大陆）\", \"zh-CN\", \"zh_CN\"],\r\n            // Cantonese Chinese\r\n            \"zh-HK\": [\"Google 粤語（香港）\", \"zh-HK\", \"zh_HK\"],\r\n            // Native voice\r\n            \"native\": [\"native\"]\r\n        };\r\n        // Important: retrieve the voices of the browser as soon as possible.\r\n        // Normally, the execution of speechSynthesis.getVoices will return at the first time an empty array.\r\n        if (window.hasOwnProperty('speechSynthesis')) {\r\n            speechSynthesis.getVoices();\r\n        }\r\n        else {\r\n            console.error(\"Artyom.js can't speak without the Speech Synthesis API.\");\r\n        }\r\n        // This instance of webkitSpeechRecognition is the one used by Artyom.\r\n        if (window.hasOwnProperty('webkitSpeechRecognition')) {\r\n            this.ArtyomWebkitSpeechRecognition = new window.webkitSpeechRecognition();\r\n        }\r\n        else {\r\n            console.error(\"Artyom.js can't recognize voice without the Speech Recognition API.\");\r\n        }\r\n        this.ArtyomProperties = {\r\n            lang: 'en-GB',\r\n            recognizing: false,\r\n            continuous: false,\r\n            speed: 1,\r\n            volume: 1,\r\n            listen: false,\r\n            mode: \"normal\",\r\n            debug: false,\r\n            helpers: {\r\n                redirectRecognizedTextOutput: null,\r\n                remoteProcessorHandler: null,\r\n                lastSay: null,\r\n                fatalityPromiseCallback: null\r\n            },\r\n            executionKeyword: null,\r\n            obeyKeyword: null,\r\n            speaking: false,\r\n            obeying: true,\r\n            soundex: false,\r\n            name: null\r\n        };\r\n        this.ArtyomGarbageCollection = [];\r\n        this.ArtyomFlags = {\r\n            restartRecognition: false\r\n        };\r\n        this.ArtyomGlobalEvents = {\r\n            ERROR: \"ERROR\",\r\n            SPEECH_SYNTHESIS_START: \"SPEECH_SYNTHESIS_START\",\r\n            SPEECH_SYNTHESIS_END: \"SPEECH_SYNTHESIS_END\",\r\n            TEXT_RECOGNIZED: \"TEXT_RECOGNIZED\",\r\n            COMMAND_RECOGNITION_START: \"COMMAND_RECOGNITION_START\",\r\n            COMMAND_RECOGNITION_END: \"COMMAND_RECOGNITION_END\",\r\n            COMMAND_MATCHED: \"COMMAND_MATCHED\",\r\n            NOT_COMMAND_MATCHED: \"NOT_COMMAND_MATCHED\"\r\n        };\r\n        this.Device = {\r\n            isMobile: false,\r\n            isChrome: true\r\n        };\r\n        if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {\r\n            this.Device.isMobile = true;\r\n        }\r\n        if (navigator.userAgent.indexOf(\"Chrome\") == -1) {\r\n            this.Device.isChrome = false;\r\n        }\r\n        /**\r\n         * The default voice of Artyom in the Desktop. In mobile, you will need to initialize (or force the language)\r\n         * with a language code in order to find an available voice in the device, otherwise it will use the native voice.\r\n         */\r\n        this.ArtyomVoice = {\r\n            default: false,\r\n            lang: \"en-GB\",\r\n            localService: false,\r\n            name: \"Google UK English Male\",\r\n            voiceURI: \"Google UK English Male\"\r\n        };\r\n    }\r\n    /**\r\n     * Add dinamically commands to artyom using\r\n     * You can even add commands while artyom is active.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/addcommands\r\n     * @since 0.6\r\n     * @param {Object | Array[Objects]} param\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.addCommands = function (param) {\r\n        var _this = this;\r\n        var processCommand = function (command) {\r\n            if (command.hasOwnProperty(\"indexes\")) {\r\n                _this.ArtyomCommands.push(command);\r\n            }\r\n            else {\r\n                console.error(\"The given command doesn't provide any index to execute.\");\r\n            }\r\n        };\r\n        if (param instanceof Array) {\r\n            for (var i = 0; i < param.length; i++) {\r\n                processCommand(param[i]);\r\n            }\r\n        }\r\n        else {\r\n            processCommand(param);\r\n        }\r\n        return true;\r\n    };\r\n    ;\r\n    /**\r\n     * The SpeechSynthesisUtterance objects are stored in the artyom_garbage_collector variable\r\n     * to prevent the wrong behaviour of artyom.say.\r\n     * Use this method to clear all spoken SpeechSynthesisUtterance unused objects.\r\n     *\r\n     * @returns {Array<any>}\r\n     */\r\n    Artyom.prototype.clearGarbageCollection = function () {\r\n        return this.ArtyomGarbageCollection = [];\r\n    };\r\n    ;\r\n    /**\r\n     * Displays a message in the console if the artyom propery DEBUG is set to true.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/debug\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.debug = function (message, type) {\r\n        var preMessage = \"[v\" + this.getVersion() + \"] Artyom.js\";\r\n        if (this.ArtyomProperties.debug === true) {\r\n            switch (type) {\r\n                case \"error\":\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #C12127; color: black;', 'color:black;');\r\n                    break;\r\n                case \"warn\":\r\n                    console.warn(message);\r\n                    break;\r\n                case \"info\":\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #4285F4; color: #FFFFFF', 'color:black;');\r\n                    break;\r\n                default:\r\n                    console.log(\"%c\" + preMessage + \":%c \" + message, 'background: #005454; color: #BFF8F8', 'color:black;');\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Artyom have it's own diagnostics.\r\n     * Run this function in order to detect why artyom is not initialized.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/detecterrors\r\n     * @param {type} callback\r\n     * @returns {}\r\n     */\r\n    Artyom.prototype.detectErrors = function () {\r\n        var _this = this;\r\n        if ((window.location.protocol) == \"file:\") {\r\n            var message = \"Error: running Artyom directly from a file. The APIs require a different communication protocol like HTTP or HTTPS\";\r\n            console.error(message);\r\n            return {\r\n                code: \"artyom_error_localfile\",\r\n                message: message\r\n            };\r\n        }\r\n        if (!_this.Device.isChrome) {\r\n            var message = \"Error: the Speech Recognition and Speech Synthesis APIs require the Google Chrome Browser to work.\";\r\n            console.error(message);\r\n            return {\r\n                code: \"artyom_error_browser_unsupported\",\r\n                message: message\r\n            };\r\n        }\r\n        if (window.location.protocol != \"https:\") {\r\n            console.warn(\"Warning: artyom is being executed using the '\" + window.location.protocol + \"' protocol. The continuous mode requires a secure protocol (HTTPS)\");\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Removes all the added commands of artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/emptycommands\r\n     * @since 0.6\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.emptyCommands = function () {\r\n        return this.ArtyomCommands = [];\r\n    };\r\n    /**\r\n     * Returns an object with data of the matched element\r\n     *\r\n     * @private\r\n     * @param {string} comando\r\n     * @returns {MatchedCommand}\r\n     */\r\n    Artyom.prototype.execute = function (voz) {\r\n        var _this = this;\r\n        if (!voz) {\r\n            console.warn(\"Internal error: Execution of empty command\");\r\n            return;\r\n        }\r\n        // If artyom was initialized with a name, verify that the name begins with it to allow the execution of commands.\r\n        if (_this.ArtyomProperties.name) {\r\n            if (voz.indexOf(_this.ArtyomProperties.name) != 0) {\r\n                _this.debug(\"Artyom requires with a name \\\"\" + _this.ArtyomProperties.name + \"\\\" but the name wasn't spoken.\", \"warn\");\r\n                return;\r\n            }\r\n            // Remove name from voice command\r\n            voz = voz.substr(_this.ArtyomProperties.name.length);\r\n        }\r\n        _this.debug(\">> \" + voz);\r\n        /** @3\r\n         * Artyom needs time to think that\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            var wildy = \"\";\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                var opcion = opciones[c];\r\n                if (!instruction.smart) {\r\n                    continue; //Jump if is not smart command\r\n                }\r\n                // Process RegExp\r\n                if (opcion instanceof RegExp) {\r\n                    // If RegExp matches \r\n                    if (opcion.test(voz)) {\r\n                        _this.debug(\">> REGEX \" + opcion.toString() + \" MATCHED AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                        encontrado = parseInt(c.toString());\r\n                    }\r\n                    // Otherwise just wildcards\r\n                }\r\n                else {\r\n                    if (opcion.indexOf(\"*\") != -1) {\r\n                        ///LOGIC HERE\r\n                        var grupo = opcion.split(\"*\");\r\n                        if (grupo.length > 2) {\r\n                            console.warn(\"Artyom found a smart command with \" + (grupo.length - 1) + \" wildcards. Artyom only support 1 wildcard for each command. Sorry\");\r\n                            continue;\r\n                        }\r\n                        //START SMART COMMAND\r\n                        var before = grupo[0];\r\n                        var later = grupo[1];\r\n                        // Wildcard in the end\r\n                        if ((later == \"\") || (later == \" \")) {\r\n                            if ((voz.indexOf(before) != -1) || ((voz.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                wildy = voz.replace(before, '');\r\n                                wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '');\r\n                                encontrado = parseInt(c.toString());\r\n                            }\r\n                        }\r\n                        else {\r\n                            if ((voz.indexOf(before) != -1) || ((voz.toLowerCase()).indexOf(before.toLowerCase()) != -1)) {\r\n                                if ((voz.indexOf(later) != -1) || ((voz.toLowerCase()).indexOf(later.toLowerCase()) != -1)) {\r\n                                    wildy = voz.replace(before, '').replace(later, '');\r\n                                    wildy = (wildy.toLowerCase()).replace(before.toLowerCase(), '').replace(later.toLowerCase(), '');\r\n                                    wildy = (wildy.toLowerCase()).replace(later.toLowerCase(), '');\r\n                                    encontrado = parseInt(c.toString());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.warn(\"Founded command marked as SMART but have no wildcard in the indexes, remove the SMART for prevent extensive memory consuming or add the wildcard *\");\r\n                    }\r\n                }\r\n                if ((encontrado >= 0)) {\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction,\r\n                    wildcard: {\r\n                        item: wildy,\r\n                        full: voz\r\n                    }\r\n                };\r\n                return response;\r\n            }\r\n        } //End @3\r\n        /** @1\r\n         * Search for IDENTICAL matches in the commands if nothing matches\r\n         * start with a index match in commands\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            /**\r\n             * Execution of match with identical commands\r\n             */\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                var opcion = opciones[c];\r\n                if (instruction.smart) {\r\n                    continue; //Jump wildcard commands\r\n                }\r\n                if ((voz === opcion)) {\r\n                    _this.debug(\">> MATCHED FULL EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n                else if ((voz.toLowerCase() === opcion.toLowerCase())) {\r\n                    _this.debug(\">> MATCHED OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction\r\n                };\r\n                return response;\r\n            }\r\n        } //End @1\r\n        /**\r\n         * Step 3 Commands recognition.\r\n         * If the command is not smart, and any of the commands match exactly then try to find\r\n         * a command in all the quote.\r\n         */\r\n        for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n            var instruction = _this.ArtyomCommands[i];\r\n            var opciones = instruction.indexes;\r\n            var encontrado = -1;\r\n            /**\r\n             * Execution of match with index\r\n             */\r\n            for (var c = 0; c < opciones.length; c++) {\r\n                if (instruction.smart) {\r\n                    continue; //Jump wildcard commands\r\n                }\r\n                var opcion = opciones[c];\r\n                if ((voz.indexOf(opcion) >= 0)) {\r\n                    _this.debug(\">> MATCHED INDEX EXACT OPTION \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n                else if (((voz.toLowerCase()).indexOf(opcion.toLowerCase()) >= 0)) {\r\n                    _this.debug(\">> MATCHED INDEX OPTION CHANGING ALL TO LOWERCASE \" + opcion + \" AGAINST \" + voz + \" WITH INDEX \" + c + \" IN COMMAND \", \"info\");\r\n                    encontrado = parseInt(c.toString());\r\n                    break;\r\n                }\r\n            }\r\n            if (encontrado >= 0) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                var response = {\r\n                    index: encontrado,\r\n                    instruction: instruction\r\n                };\r\n                return response;\r\n            }\r\n        } //End Step 3\r\n        /**\r\n         * If the soundex options is enabled, proceed to process the commands in case that any of the previous\r\n         * ways of processing (exact, lowercase and command in quote) didn't match anything.\r\n         * Based on the soundex algorithm match a command if the spoken text is similar to any of the artyom commands.\r\n         * Example :\r\n         * If you have a command with \"Open Wallmart\" and \"Open Willmar\" is recognized, the open wallmart command will be triggered.\r\n         * soundex(\"Open Wallmart\") == soundex(\"Open Willmar\") <= true\r\n         *\r\n         */\r\n        if (_this.ArtyomProperties.soundex) {\r\n            for (var i = 0; i < _this.ArtyomCommands.length; i++) {\r\n                var instruction = _this.ArtyomCommands[i];\r\n                var opciones = instruction.indexes;\r\n                var encontrado = -1;\r\n                for (var c = 0; c < opciones.length; c++) {\r\n                    var opcion = opciones[c];\r\n                    if (instruction.smart) {\r\n                        continue; //Jump wildcard commands\r\n                    }\r\n                    if (_this.soundex(voz) == _this.soundex(opcion)) {\r\n                        _this.debug(\">> Matched Soundex command '\" + opcion + \"' AGAINST '\" + voz + \"' with index \" + c, \"info\");\r\n                        encontrado = parseInt(c.toString());\r\n                        _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_MATCHED);\r\n                        var response = {\r\n                            index: encontrado,\r\n                            instruction: instruction\r\n                        };\r\n                        return response;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n        _this.triggerEvent(_this.ArtyomGlobalEvents.NOT_COMMAND_MATCHED);\r\n        return;\r\n    };\r\n    /**\r\n     * Force artyom to stop listen even if is in continuos mode.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/fatality\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.fatality = function () {\r\n        var _this = this;\r\n        //fatalityPromiseCallback\r\n        return new Promise(function (resolve, reject) {\r\n            // Expose the fatality promise callback to the helpers object of Artyom.\r\n            // The promise isn't resolved here itself but in the onend callback of\r\n            // the speechRecognition instance of artyom\r\n            _this.ArtyomProperties.helpers.fatalityPromiseCallback = resolve;\r\n            try {\r\n                // If config is continuous mode, deactivate anyway.\r\n                _this.ArtyomFlags.restartRecognition = false;\r\n                _this.ArtyomWebkitSpeechRecognition.stop();\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Returns an array with all the available commands for artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getavailablecommands\r\n     * @readonly\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getAvailableCommands = function () {\r\n        return this.ArtyomCommands;\r\n    };\r\n    /**\r\n     * Artyom can return inmediately the voices available in your browser.\r\n     *\r\n     * @readonly\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getvoices\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getVoices = function () {\r\n        return window.speechSynthesis.getVoices();\r\n    };\r\n    /**\r\n     * Verify if the browser supports speechSynthesis.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/speechsupported\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.speechSupported = function () {\r\n        return 'speechSynthesis' in window;\r\n    };\r\n    /**\r\n     * Verify if the browser supports webkitSpeechRecognition.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/recognizingsupported\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.recognizingSupported = function () {\r\n        return 'webkitSpeechRecognition' in window;\r\n    };\r\n    /**\r\n     * Stops the actual and pendings messages that artyom have to say.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/shutup\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.shutUp = function () {\r\n        if ('speechSynthesis' in window) {\r\n            do {\r\n                window.speechSynthesis.cancel();\r\n            } while (window.speechSynthesis.pending === true);\r\n        }\r\n        this.ArtyomProperties.speaking = false;\r\n        this.clearGarbageCollection();\r\n    };\r\n    /**\r\n     * Returns an object with the actual properties of artyom.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getproperties\r\n     * @returns {object}\r\n     */\r\n    Artyom.prototype.getProperties = function () {\r\n        return this.ArtyomProperties;\r\n    };\r\n    /**\r\n     * Returns the code language of artyom according to initialize function.\r\n     * if initialize not used returns english GB.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/getlanguage\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.getLanguage = function () {\r\n        return this.ArtyomProperties.lang;\r\n    };\r\n    /**\r\n     * Retrieves the used version of Artyom.js\r\n     *\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.getVersion = function () {\r\n        return '1.0.6';\r\n    };\r\n    /**\r\n     * Artyom awaits for orders when this function\r\n     * is executed.\r\n     *\r\n     * If artyom gets a first parameter the instance will be stopped.\r\n     *\r\n     * @private\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.hey = function (resolve, reject) {\r\n        var start_timestamp;\r\n        var artyom_is_allowed;\r\n        var _this = this;\r\n        /**\r\n         * On mobile devices the recognized text is always thrown twice.\r\n         * By setting the following configuration, fixes the issue\r\n         */\r\n        if (this.Device.isMobile) {\r\n            this.ArtyomWebkitSpeechRecognition.continuous = false;\r\n            this.ArtyomWebkitSpeechRecognition.interimResults = false;\r\n            this.ArtyomWebkitSpeechRecognition.maxAlternatives = 1;\r\n        }\r\n        else {\r\n            this.ArtyomWebkitSpeechRecognition.continuous = true;\r\n            this.ArtyomWebkitSpeechRecognition.interimResults = true;\r\n        }\r\n        this.ArtyomWebkitSpeechRecognition.lang = this.ArtyomProperties.lang;\r\n        this.ArtyomWebkitSpeechRecognition.onstart = function () {\r\n            _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_START);\r\n            _this.ArtyomProperties.recognizing = true;\r\n            artyom_is_allowed = true;\r\n            resolve();\r\n        };\r\n        /**\r\n         * Handle all artyom posible exceptions\r\n         *\r\n         * @param {type} event\r\n         * @returns {undefined}\r\n         */\r\n        this.ArtyomWebkitSpeechRecognition.onerror = function (event) {\r\n            // Reject promise on initialization\r\n            reject(event.error);\r\n            // Dispath error globally (artyom.when)\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                code: event.error\r\n            });\r\n            if (event.error == 'audio-capture') {\r\n                artyom_is_allowed = false;\r\n            }\r\n            if (event.error == 'not-allowed') {\r\n                artyom_is_allowed = false;\r\n                if (event.timeStamp - start_timestamp < 100) {\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                        code: \"info-blocked\",\r\n                        message: \"Artyom needs the permision of the microphone, is blocked.\"\r\n                    });\r\n                }\r\n                else {\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                        code: \"info-denied\",\r\n                        message: \"Artyom needs the permision of the microphone, is denied\"\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Check if continuous mode is active and restart the recognition.\r\n         * Throw events too.\r\n         *\r\n         * @returns {undefined}\r\n         */\r\n        _this.ArtyomWebkitSpeechRecognition.onend = function () {\r\n            if (_this.ArtyomFlags.restartRecognition === true) {\r\n                if (artyom_is_allowed === true) {\r\n                    _this.ArtyomWebkitSpeechRecognition.start();\r\n                    _this.debug(\"Continuous mode enabled, restarting\", \"info\");\r\n                }\r\n                else {\r\n                    console.error(\"Verify the microphone and check for the table of errors in sdkcarlos.github.io/sites/artyom.html to solve your problem. If you want to give your user a message when an error appears add an artyom listener\");\r\n                }\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                    code: \"continuous_mode_enabled\",\r\n                    message: \"OnEnd event reached with continuous mode\"\r\n                });\r\n            }\r\n            else {\r\n                // If the fatality promise callback was set, invoke it\r\n                if (_this.ArtyomProperties.helpers.fatalityPromiseCallback) {\r\n                    // As the speech recognition doesn't finish really, wait 500ms\r\n                    // to trigger the real fatality callback\r\n                    setTimeout(function () {\r\n                        _this.ArtyomProperties.helpers.fatalityPromiseCallback();\r\n                    }, 500);\r\n                    _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END, {\r\n                        code: \"continuous_mode_disabled\",\r\n                        message: \"OnEnd event reached without continuous mode\"\r\n                    });\r\n                }\r\n            }\r\n            _this.ArtyomProperties.recognizing = false;\r\n        };\r\n        /**\r\n         * Declare the processor dinamycally according to the mode of artyom\r\n         * to increase the performance.\r\n         *\r\n         * @type {Function}\r\n         * @return\r\n         */\r\n        var onResultProcessor;\r\n        // Process the recognition in normal mode\r\n        if (_this.ArtyomProperties.mode == \"normal\") {\r\n            onResultProcessor = function (event) {\r\n                if (!_this.ArtyomCommands.length) {\r\n                    _this.debug(\"No commands to process in normal mode.\");\r\n                    return;\r\n                }\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    if (event.results[i].isFinal) {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        // Redirect the output of the text if necessary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in normal mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            // Execute the command if smart\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\r\n                                // Execute a normal command\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                        }\r\n                        if (typeof (_this.ArtyomProperties.executionKeyword) === \"string\") {\r\n                            if (identificated.indexOf(_this.ArtyomProperties.executionKeyword) != -1) {\r\n                                var comando = _this.execute(identificated.replace(_this.ArtyomProperties.executionKeyword, '').trim());\r\n                                if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                                    _this.debug(\"<< Executing command ordered by ExecutionKeyword >>\", 'info');\r\n                                    _this.ArtyomWebkitSpeechRecognition.stop();\r\n                                    _this.ArtyomProperties.recognizing = false;\r\n                                    //Executing Command Action\r\n                                    if (comando.wildcard) {\r\n                                        comando.instruction.action(comando.index, comando.wildcard.item, comando.wildcard.full);\r\n                                    }\r\n                                    else {\r\n                                        comando.instruction.action(comando.index);\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        _this.debug(\"Normal mode : \" + identificated);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        // Process the recognition in quick mode\r\n        if (_this.ArtyomProperties.mode == \"quick\") {\r\n            onResultProcessor = function (event) {\r\n                if (!_this.ArtyomCommands.length) {\r\n                    _this.debug(\"No commands to process.\");\r\n                    return;\r\n                }\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    if (!event.results[i].isFinal) {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        //Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, true);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            //Executing Command Action\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item);\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        var comando = _this.execute(identificated.trim());\r\n                        //Redirect output when necesary\r\n                        if (typeof (_this.ArtyomProperties.helpers.redirectRecognizedTextOutput) === \"function\") {\r\n                            _this.ArtyomProperties.helpers.redirectRecognizedTextOutput(identificated, false);\r\n                        }\r\n                        if ((comando) && (_this.ArtyomProperties.recognizing == true)) {\r\n                            _this.debug(\"<< Executing Matching Recognition in quick mode >>\", \"info\");\r\n                            _this.ArtyomWebkitSpeechRecognition.stop();\r\n                            _this.ArtyomProperties.recognizing = false;\r\n                            //Executing Command Action\r\n                            if (comando.wildcard) {\r\n                                comando.instruction.action(comando.index, comando.wildcard.item);\r\n                            }\r\n                            else {\r\n                                comando.instruction.action(comando.index);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    _this.debug(\"Quick mode : \" + identificated);\r\n                }\r\n            };\r\n        }\r\n        // Process the recognition in remote mode\r\n        if (_this.ArtyomProperties.mode == \"remote\") {\r\n            onResultProcessor = function (event) {\r\n                var cantidadResultados = event.results.length;\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.TEXT_RECOGNIZED);\r\n                if (typeof (_this.ArtyomProperties.helpers.remoteProcessorHandler) !== \"function\") {\r\n                    return _this.debug(\"The remoteProcessorService is undefined.\", \"warn\");\r\n                }\r\n                for (var i = event.resultIndex; i < cantidadResultados; ++i) {\r\n                    var identificated = event.results[i][0].transcript;\r\n                    _this.ArtyomProperties.helpers.remoteProcessorHandler({\r\n                        text: identificated,\r\n                        isFinal: event.results[i].isFinal\r\n                    });\r\n                }\r\n            };\r\n        }\r\n        /**\r\n         * Process the recognition event with the previously\r\n         * declared processor function.\r\n         *\r\n         * @param {type} event\r\n         * @returns {undefined}\r\n         */\r\n        _this.ArtyomWebkitSpeechRecognition.onresult = function (event) {\r\n            if (_this.ArtyomProperties.obeying) {\r\n                onResultProcessor(event);\r\n            }\r\n            else {\r\n                // Handle obeyKeyword if exists and artyom is not obeying\r\n                if (!_this.ArtyomProperties.obeyKeyword) {\r\n                    return;\r\n                }\r\n                var temporal = \"\";\r\n                var interim = \"\";\r\n                for (var i = 0; i < event.results.length; ++i) {\r\n                    if (event.results[i].isFinal) {\r\n                        temporal += event.results[i][0].transcript;\r\n                    }\r\n                    else {\r\n                        interim += event.results[i][0].transcript;\r\n                    }\r\n                }\r\n                _this.debug(\"Artyom is not obeying\", \"warn\");\r\n                // If the obeyKeyword is found in the recognized text\r\n                // enable command recognition again\r\n                if (((interim).indexOf(_this.ArtyomProperties.obeyKeyword) > -1) || (temporal).indexOf(_this.ArtyomProperties.obeyKeyword) > -1) {\r\n                    _this.ArtyomProperties.obeying = true;\r\n                }\r\n            }\r\n        };\r\n        if (_this.ArtyomProperties.recognizing) {\r\n            _this.ArtyomWebkitSpeechRecognition.stop();\r\n            _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n            _this.triggerEvent(_this.ArtyomGlobalEvents.COMMAND_RECOGNITION_END);\r\n        }\r\n        else {\r\n            try {\r\n                _this.ArtyomWebkitSpeechRecognition.start();\r\n            }\r\n            catch (e) {\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.ERROR, {\r\n                    code: \"recognition_overlap\",\r\n                    message: \"A webkitSpeechRecognition instance has been started while there's already running. Is recommendable to restart the Browser\"\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set up artyom for the application.\r\n     *\r\n     * This function will set the default language used by artyom\r\n     * or notice the user if artyom is not supported in the actual\r\n     * browser\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/initialize\r\n     * @param {Object} config\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.initialize = function (config) {\r\n        var _this = this;\r\n        if (typeof (config) !== \"object\") {\r\n            return Promise.reject(\"You must give the configuration for start artyom properly.\");\r\n        }\r\n        if (config.hasOwnProperty(\"lang\")) {\r\n            _this.ArtyomVoice = _this.getVoice(config.lang);\r\n            _this.ArtyomProperties.lang = config.lang;\r\n        }\r\n        if (config.hasOwnProperty(\"continuous\")) {\r\n            if (config.continuous) {\r\n                this.ArtyomProperties.continuous = true;\r\n                this.ArtyomFlags.restartRecognition = true;\r\n            }\r\n            else {\r\n                this.ArtyomProperties.continuous = false;\r\n                this.ArtyomFlags.restartRecognition = false;\r\n            }\r\n        }\r\n        if (config.hasOwnProperty(\"speed\")) {\r\n            this.ArtyomProperties.speed = config.speed;\r\n        }\r\n        if (config.hasOwnProperty(\"soundex\")) {\r\n            this.ArtyomProperties.soundex = config.soundex;\r\n        }\r\n        if (config.hasOwnProperty(\"executionKeyword\")) {\r\n            this.ArtyomProperties.executionKeyword = config.executionKeyword;\r\n        }\r\n        if (config.hasOwnProperty(\"obeyKeyword\")) {\r\n            this.ArtyomProperties.obeyKeyword = config.obeyKeyword;\r\n        }\r\n        if (config.hasOwnProperty(\"volume\")) {\r\n            this.ArtyomProperties.volume = config.volume;\r\n        }\r\n        if (config.hasOwnProperty(\"listen\")) {\r\n            this.ArtyomProperties.listen = config.listen;\r\n        }\r\n        if (config.hasOwnProperty(\"name\")) {\r\n            this.ArtyomProperties.name = config.name;\r\n        }\r\n        if (config.hasOwnProperty(\"debug\")) {\r\n            this.ArtyomProperties.debug = config.debug;\r\n        }\r\n        else {\r\n            console.warn(\"The initialization doesn't provide how the debug mode should be handled. Is recommendable to set this value either to true or false.\");\r\n        }\r\n        if (config.mode) {\r\n            this.ArtyomProperties.mode = config.mode;\r\n        }\r\n        if (this.ArtyomProperties.listen === true) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this.hey(resolve, reject);\r\n            });\r\n        }\r\n        return Promise.resolve(true);\r\n    };\r\n    /**\r\n     * Add commands like an artisan. If you use artyom for simple tasks\r\n     * then probably you don't like to write a lot to achieve it.\r\n     *\r\n     * Use the artisan syntax to write less, but with the same accuracy.\r\n     *\r\n     * @disclaimer Not a promise-based implementation, just syntax.\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.on = function (indexes, smart) {\r\n        var _this = this;\r\n        return {\r\n            then: function (action) {\r\n                var command = {\r\n                    indexes: indexes,\r\n                    action: action\r\n                };\r\n                if (smart) {\r\n                    command.smart = true;\r\n                }\r\n                _this.addCommands(command);\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Generates an artyom event with the designed name\r\n     *\r\n     * @param {type} name\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.triggerEvent = function (name, param) {\r\n        var event = new CustomEvent(name, {\r\n            'detail': param\r\n        });\r\n        document.dispatchEvent(event);\r\n        return event;\r\n    };\r\n    /**\r\n     * Repeats the last sentence that artyom said.\r\n     * Useful in noisy environments.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/repeatlastsay\r\n     * @param {Boolean} returnObject If set to true, an object with the text and the timestamp when was executed will be returned.\r\n     * @returns {Object}\r\n     */\r\n    Artyom.prototype.repeatLastSay = function (returnObject) {\r\n        var last = this.ArtyomProperties.helpers.lastSay;\r\n        if (returnObject) {\r\n            return last;\r\n        }\r\n        else {\r\n            if (last != null) {\r\n                this.say(last.text);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Create a listener when an artyom action is called.\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/when\r\n     * @param {type} event\r\n     * @param {type} action\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.when = function (event, action) {\r\n        return document.addEventListener(event, function (e) {\r\n            action(e[\"detail\"]);\r\n        }, false);\r\n    };\r\n    /**\r\n     * Process the recognized text if artyom is active in remote mode.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.remoteProcessorService = function (action) {\r\n        this.ArtyomProperties.helpers.remoteProcessorHandler = action;\r\n        return true;\r\n    };\r\n    /**\r\n     * Verify if there's a voice available for a language using its language code identifier.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    Artyom.prototype.voiceAvailable = function (languageCode) {\r\n        return typeof (this.getVoice(languageCode)) !== \"undefined\";\r\n    };\r\n    /**\r\n     * A boolean to check if artyom is obeying commands or not.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isObeying = function () {\r\n        return this.ArtyomProperties.obeying;\r\n    };\r\n    /**\r\n     * Allow artyom to obey commands again.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.obey = function () {\r\n        return this.ArtyomProperties.obeying = true;\r\n    };\r\n    /**\r\n     * Pause the processing of commands. Artyom still listening in the background and it can be resumed after a couple of seconds.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.dontObey = function () {\r\n        return this.ArtyomProperties.obeying = false;\r\n    };\r\n    /**\r\n     * This function returns a boolean according to the speechSynthesis status\r\n     * if artyom is speaking, will return true.\r\n     *\r\n     * Note: This is not a feature of speechSynthesis, therefore this value hangs on\r\n     * the fiability of the onStart and onEnd events of the speechSynthesis\r\n     *\r\n     * @since 0.9.3\r\n     * @summary Returns true if speechSynthesis is active\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isSpeaking = function () {\r\n        return this.ArtyomProperties.speaking;\r\n    };\r\n    /**\r\n     * This function returns a boolean according to the SpeechRecognition status\r\n     * if artyom is listening, will return true.\r\n     *\r\n     * Note: This is not a feature of SpeechRecognition, therefore this value hangs on\r\n     * the fiability of the onStart and onEnd events of the SpeechRecognition\r\n     *\r\n     * @since 0.9.3\r\n     * @summary Returns true if SpeechRecognition is active\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.isRecognizing = function () {\r\n        return this.ArtyomProperties.recognizing;\r\n    };\r\n    /**\r\n     * This function will return the webkitSpeechRecognition object used by artyom\r\n     * retrieve it only to debug on it or get some values, do not make changes directly\r\n     *\r\n     * @readonly\r\n     * @since 0.9.2\r\n     * @summary Retrieve the native webkitSpeechRecognition object\r\n     * @returns {Object webkitSpeechRecognition}\r\n     */\r\n    Artyom.prototype.getNativeApi = function () {\r\n        return this.ArtyomWebkitSpeechRecognition;\r\n    };\r\n    /**\r\n     * Returns the SpeechSynthesisUtterance garbageobjects.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.getGarbageCollection = function () {\r\n        return this.ArtyomGarbageCollection;\r\n    };\r\n    /**\r\n     *  Retrieve a single voice of the browser by it's language code.\r\n     *  It will return the first voice available for the language on every device.\r\n     *\r\n     * @param languageCode\r\n     */\r\n    Artyom.prototype.getVoice = function (languageCode) {\r\n        var voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[languageCode];\r\n        if (!voiceIdentifiersArray) {\r\n            console.warn(\"The providen language \" + languageCode + \" isn't available, using English Great britain as default\");\r\n            voiceIdentifiersArray = this.ArtyomVoicesIdentifiers[\"en-GB\"];\r\n        }\r\n        var voice = undefined;\r\n        var voices = speechSynthesis.getVoices();\r\n        var voicesLength = voiceIdentifiersArray.length;\r\n        var _loop_1 = function (i) {\r\n            var foundVoice = voices.filter(function (voice) {\r\n                return ((voice.name == voiceIdentifiersArray[i]) || (voice.lang == voiceIdentifiersArray[i]));\r\n            })[0];\r\n            if (foundVoice) {\r\n                voice = foundVoice;\r\n                return \"break\";\r\n            }\r\n        };\r\n        for (var i = 0; i < voicesLength; i++) {\r\n            var state_1 = _loop_1(i);\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n        return voice;\r\n    };\r\n    /**\r\n     * Artyom provide an easy way to create a\r\n     * dictation for your user.\r\n     *\r\n     * Just create an instance and start and stop when you want\r\n     *\r\n     * @returns Object | newDictation\r\n     */\r\n    Artyom.prototype.newDictation = function (settings) {\r\n        var _this = this;\r\n        if (!_this.recognizingSupported()) {\r\n            console.error(\"SpeechRecognition is not supported in this browser\");\r\n            return false;\r\n        }\r\n        var dictado = new window.webkitSpeechRecognition();\r\n        dictado.continuous = true;\r\n        dictado.interimResults = true;\r\n        dictado.lang = _this.ArtyomProperties.lang;\r\n        dictado.onresult = function (event) {\r\n            var temporal = \"\";\r\n            var interim = \"\";\r\n            for (var i = 0; i < event.results.length; ++i) {\r\n                if (event.results[i].isFinal) {\r\n                    temporal += event.results[i][0].transcript;\r\n                }\r\n                else {\r\n                    interim += event.results[i][0].transcript;\r\n                }\r\n            }\r\n            if (settings.onResult) {\r\n                settings.onResult(interim, temporal);\r\n            }\r\n        };\r\n        return new function () {\r\n            var dictation = dictado;\r\n            var flagStartCallback = true;\r\n            var flagRestart = false;\r\n            this.onError = null;\r\n            this.start = function () {\r\n                if (settings.continuous === true) {\r\n                    flagRestart = true;\r\n                }\r\n                dictation.onstart = function () {\r\n                    if (typeof (settings.onStart) === \"function\") {\r\n                        if (flagStartCallback === true) {\r\n                            settings.onStart();\r\n                        }\r\n                    }\r\n                };\r\n                dictation.onend = function () {\r\n                    if (flagRestart === true) {\r\n                        flagStartCallback = false;\r\n                        dictation.start();\r\n                    }\r\n                    else {\r\n                        flagStartCallback = true;\r\n                        if (typeof (settings.onEnd) === \"function\") {\r\n                            settings.onEnd();\r\n                        }\r\n                    }\r\n                };\r\n                dictation.start();\r\n            };\r\n            this.stop = function () {\r\n                flagRestart = false;\r\n                dictation.stop();\r\n            };\r\n            if (typeof (settings.onError) === \"function\") {\r\n                dictation.onerror = settings.onError;\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * A voice prompt will be executed.\r\n     *\r\n     * @param {type} config\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.newPrompt = function (config) {\r\n        if (typeof (config) !== \"object\") {\r\n            console.error(\"Expected the prompt configuration.\");\r\n        }\r\n        var copyActualCommands = Object.assign([], this.ArtyomCommands);\r\n        var _this = this;\r\n        this.emptyCommands();\r\n        var promptCommand = {\r\n            description: \"Setting the artyom commands only for the prompt. The commands will be restored after the prompt finishes\",\r\n            indexes: config.options,\r\n            action: function (i, wildcard) {\r\n                _this.ArtyomCommands = copyActualCommands;\r\n                var toExe = config.onMatch(i, wildcard);\r\n                if (typeof (toExe) !== \"function\") {\r\n                    console.error(\"onMatch function expects a returning function to be executed\");\r\n                    return;\r\n                }\r\n                toExe();\r\n            }\r\n        };\r\n        if (config.smart) {\r\n            promptCommand.smart = true;\r\n        }\r\n        this.addCommands(promptCommand);\r\n        if (typeof (config.beforePrompt) !== \"undefined\") {\r\n            config.beforePrompt();\r\n        }\r\n        var callbacks = {\r\n            onStart: function () {\r\n                if (typeof (config.onStartPrompt) !== \"undefined\") {\r\n                    config.onStartPrompt();\r\n                }\r\n            },\r\n            onEnd: function () {\r\n                if (typeof (config.onEndPrompt) !== \"undefined\") {\r\n                    config.onEndPrompt();\r\n                }\r\n            }\r\n        };\r\n        this.say(config.question, callbacks);\r\n    };\r\n    /**\r\n     * Says a random quote and returns it's object\r\n     *\r\n     * @param {type} data\r\n     * @returns {object}\r\n     */\r\n    Artyom.prototype.sayRandom = function (data) {\r\n        if (data instanceof Array) {\r\n            var index = Math.floor(Math.random() * data.length);\r\n            this.say(data[index]);\r\n            return {\r\n                text: data[index],\r\n                index: index\r\n            };\r\n        }\r\n        else {\r\n            console.error(\"Random quotes must be in an array !\");\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Shortcut method to enable the artyom debug on the fly.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    Artyom.prototype.setDebug = function (status) {\r\n        if (status) {\r\n            return this.ArtyomProperties.debug = true;\r\n        }\r\n        else {\r\n            return this.ArtyomProperties.debug = false;\r\n        }\r\n    };\r\n    /**\r\n     * Simulate a voice command via JS\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/simulateinstruction\r\n     * @param {type} sentence\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.simulateInstruction = function (sentence) {\r\n        var _this = this;\r\n        if ((!sentence) || (typeof (sentence) !== \"string\")) {\r\n            console.warn(\"Cannot execute a non string command\");\r\n            return false;\r\n        }\r\n        var foundCommand = _this.execute(sentence); //Command founded object\r\n        if (typeof (foundCommand) === \"object\") {\r\n            if (foundCommand.instruction) {\r\n                if (foundCommand.instruction.smart) {\r\n                    _this.debug('Smart command matches with simulation, executing', \"info\");\r\n                    foundCommand.instruction.action(foundCommand.index, foundCommand.wildcard.item, foundCommand.wildcard.full);\r\n                }\r\n                else {\r\n                    _this.debug('Command matches with simulation, executing', \"info\");\r\n                    foundCommand.instruction.action(foundCommand.index); //Execute Normal command\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            console.warn(\"No command founded trying with \" + sentence);\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Javascript implementation of the soundex algorithm.\r\n     * @see https://gist.github.com/shawndumas/1262659\r\n     * @returns {String}\r\n     */\r\n    Artyom.prototype.soundex = function (s) {\r\n        var a = s.toLowerCase().split('');\r\n        var f = a.shift();\r\n        var r = '';\r\n        var codes = { a: \"\", e: \"\", i: \"\", o: \"\", u: \"\", b: 1, f: 1, p: 1, v: 1, c: 2, g: 2, j: 2, k: 2, q: 2, s: 2, x: 2, z: 2, d: 3, t: 3, l: 4, m: 5, n: 5, r: 6 };\r\n        r = f + a\r\n            .map(function (v, i, a) {\r\n            return codes[v];\r\n        })\r\n            .filter(function (v, i, a) {\r\n            return ((i === 0) ? v !== codes[f] : v !== a[i - 1]);\r\n        })\r\n            .join('');\r\n        return (r + '000').slice(0, 4).toUpperCase();\r\n    };\r\n    /**\r\n     * Splits a string into an array of strings with a limited size (chunk_length).\r\n     *\r\n     * @param {String} input text to split into chunks\r\n     * @param {Integer} chunk_length limit of characters in every chunk\r\n     */\r\n    Artyom.prototype.splitStringByChunks = function (input, chunk_length) {\r\n        input = input || \"\";\r\n        chunk_length = chunk_length || 100;\r\n        var curr = chunk_length;\r\n        var prev = 0;\r\n        var output = [];\r\n        while (input[curr]) {\r\n            if (input[curr++] == ' ') {\r\n                output.push(input.substring(prev, curr));\r\n                prev = curr;\r\n                curr += chunk_length;\r\n            }\r\n        }\r\n        output.push(input.substr(prev));\r\n        return output;\r\n    };\r\n    /**\r\n     * Allows to retrieve the recognized spoken text of artyom\r\n     * and do something with it everytime something is recognized\r\n     *\r\n     * @param {String} action\r\n     * @returns {Boolean}\r\n     */\r\n    Artyom.prototype.redirectRecognizedTextOutput = function (action) {\r\n        if (typeof (action) != \"function\") {\r\n            console.warn(\"Expected function to handle the recognized text ...\");\r\n            return false;\r\n        }\r\n        this.ArtyomProperties.helpers.redirectRecognizedTextOutput = action;\r\n        return true;\r\n    };\r\n    /**\r\n     * Restarts artyom with the initial configuration.\r\n     *\r\n     * @param configuration\r\n     */\r\n    Artyom.prototype.restart = function () {\r\n        var _this = this;\r\n        var _copyInit = _this.ArtyomProperties;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.fatality().then(function () {\r\n                _this.initialize(_copyInit).then(resolve, reject);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Talks a text according to the given parameters.\r\n     *\r\n     * @private This function is only to be used internally.\r\n     * @param {String} text Text to be spoken\r\n     * @param {Int} actualChunk Number of chunk of the\r\n     * @param {Int} totalChunks\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.talk = function (text, actualChunk, totalChunks, callbacks) {\r\n        var _this = this;\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        msg.volume = this.ArtyomProperties.volume;\r\n        msg.rate = this.ArtyomProperties.speed;\r\n        // Select the voice according to the selected\r\n        var availableVoice = _this.getVoice(_this.ArtyomProperties.lang);\r\n        if (callbacks) {\r\n            // If the language to speak has been forced, use it\r\n            if (callbacks.hasOwnProperty(\"lang\")) {\r\n                availableVoice = _this.getVoice(callbacks.lang);\r\n            }\r\n        }\r\n        // If is a mobile device, provide only the language code in the lang property i.e \"es_ES\"\r\n        if (this.Device.isMobile) {\r\n            // Try to set the voice only if exists, otherwise don't use anything to use the native voice\r\n            if (availableVoice) {\r\n                msg.lang = availableVoice.lang;\r\n            }\r\n            // If browser provide the entire object\r\n        }\r\n        else {\r\n            msg.voice = availableVoice;\r\n        }\r\n        // If is first text chunk (onStart)\r\n        if (actualChunk == 1) {\r\n            msg.addEventListener('start', function () {\r\n                // Set artyom is talking\r\n                _this.ArtyomProperties.speaking = true;\r\n                // Trigger the onSpeechSynthesisStart event\r\n                _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_START);\r\n                // Trigger the onStart callback if exists\r\n                if (callbacks) {\r\n                    if (typeof (callbacks.onStart) == \"function\") {\r\n                        callbacks.onStart.call(msg);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // If is final text chunk (onEnd)\r\n        if ((actualChunk) >= totalChunks) {\r\n            msg.addEventListener('end', function () {\r\n                // Set artyom is talking\r\n                _this.ArtyomProperties.speaking = false;\r\n                // Trigger the onSpeechSynthesisEnd event\r\n                _this.debug(\"Event reached : \" + _this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                _this.triggerEvent(_this.ArtyomGlobalEvents.SPEECH_SYNTHESIS_END);\r\n                // Trigger the onEnd callback if exists.\r\n                if (callbacks) {\r\n                    if (typeof (callbacks.onEnd) == \"function\") {\r\n                        callbacks.onEnd.call(msg);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Notice how many chunks were processed for the given text.\r\n        this.debug((actualChunk) + \" text chunk processed succesfully out of \" + totalChunks);\r\n        // Important : Save the SpeechSynthesisUtterance object in memory, otherwise it will get lost\r\n        this.ArtyomGarbageCollection.push(msg);\r\n        window.speechSynthesis.speak(msg);\r\n    };\r\n    /**\r\n     * Process the given text into chunks and execute the private function talk\r\n     *\r\n     * @tutorial http://docs.ourcodeworld.com/projects/artyom-js/documentation/methods/say\r\n     * @param {String} message Text to be spoken\r\n     * @param {Object} callbacks\r\n     * @returns {undefined}\r\n     */\r\n    Artyom.prototype.say = function (message, callbacks) {\r\n        var artyom_say_max_chunk_length = 115;\r\n        var _this = this;\r\n        var definitive = [];\r\n        if (this.speechSupported()) {\r\n            if (typeof (message) != 'string') {\r\n                return console.warn(\"Artyom expects a string to speak \" + typeof message + \" given\");\r\n            }\r\n            if (!message.length) {\r\n                return console.warn(\"Cannot speak empty string\");\r\n            }\r\n            // If the providen text is long, proceed to split it\r\n            if (message.length > artyom_say_max_chunk_length) {\r\n                // Split the given text by pause reading characters [\",\",\":\",\";\",\". \"] to provide a natural reading feeling.\r\n                var naturalReading = message.split(/,|:|\\. |;/);\r\n                naturalReading.forEach(function (chunk, index) {\r\n                    // If the sentence is too long and could block the API, split it to prevent any errors.\r\n                    if (chunk.length > artyom_say_max_chunk_length) {\r\n                        // Process the providen string into strings (withing an array) of maximum aprox. 115 characters to prevent any error with the API.\r\n                        var temp_processed = _this.splitStringByChunks(chunk, artyom_say_max_chunk_length);\r\n                        // Add items of the processed sentence into the definitive chunk.\r\n                        definitive.push.apply(definitive, temp_processed);\r\n                    }\r\n                    else {\r\n                        // Otherwise just add the sentence to being spoken.\r\n                        definitive.push(chunk);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                definitive.push(message);\r\n            }\r\n            // Clean any empty item in array\r\n            definitive = definitive.filter(function (e) { return e; });\r\n            // Finally proceed to talk the chunks and assign the callbacks.\r\n            definitive.forEach(function (chunk, index) {\r\n                var numberOfChunk = (index + 1);\r\n                if (chunk) {\r\n                    _this.talk(chunk, numberOfChunk, definitive.length, callbacks);\r\n                }\r\n            });\r\n            // Save the spoken text into the lastSay object of artyom\r\n            _this.ArtyomProperties.helpers.lastSay = {\r\n                text: message,\r\n                date: new Date()\r\n            };\r\n        }\r\n    };\r\n    return Artyom;\r\n}());\r\nexports.default = Artyom;\r\n"],
  "mappings": "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",
  "names": ["Artyom", "i", "voice", "a"]
}
